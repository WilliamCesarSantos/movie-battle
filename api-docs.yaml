openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/battle/{id}/start:
    put:
      tags:
      - battle-controller
      summary: Start battle
      operationId: start
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Battle'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
        "404":
          description: Battle not found
          content:
            application/json:
              example:
                code: NOT_FOUND
                message: Object not found
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/battle/{id}/round:
    put:
      tags:
      - battle-controller
      summary: Create new round
      description: Create new round if not exist any round opened. Battle must be
        started
      operationId: round
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Round'
        "404":
          description: Battle not found
          content:
            application/json:
              example:
                code: NOT_FOUND
                message: Object not found
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/battle/{id}/round/{round_id}/answer:
    put:
      tags:
      - battle-controller
      summary: Answer round
      description: The battle has been started and not finished
      operationId: answer
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: round_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
        required: true
      responses:
        "404":
          description: Battle or round not found
          content:
            application/json:
              example:
                code: NOT_FOUND
                message: Object not found
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        "400":
          description: Invalid request
          content:
            application/json:
              example:
                code: BAD_REQUEST
                errors:
                - choice: must not be null
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/battle/{id}/end:
    put:
      tags:
      - battle-controller
      summary: End battle
      description: The battle has been started
      operationId: end
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Battle'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
        "404":
          description: Battle not found
          content:
            application/json:
              example:
                code: NOT_FOUND
                message: Object not found
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/login:
    post:
      tags:
      - login-controller
      summary: Login in application
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        "200":
          description: OK
          headers:
            Authorization:
              description: Token generated
              style: simple
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDtoOutput'
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/battle:
    get:
      tags:
      - battle-controller
      summary: List battles
      operationId: list_2
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: player
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBattle'
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
    post:
      tags:
      - battle-controller
      summary: Create new battle
      operationId: insert
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Battle'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
        "400":
          description: Invalid request
          content:
            application/json:
              example:
                code: BAD_REQUEST
                errors:
                - description: must not be null
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/ranking:
    get:
      tags:
      - ranking-controller
      summary: List ranking by logged user
      operationId: list
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ranking'
        "404":
          description: Player not found
          content:
            application/json:
              example:
                code: NOT_FOUND
                message: Object not found
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/player:
    get:
      tags:
      - player-controller
      summary: List all players
      operationId: list_1
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePlayer'
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/player/{id}:
    get:
      tags:
      - player-controller
      summary: List player by id
      operationId: findById
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        "404":
          description: Player not found
          content:
            application/json:
              example:
                code: NOT_FOUND
                message: Object not found
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/battle/{id}:
    get:
      tags:
      - battle-controller
      summary: Find battle by id
      operationId: findById_1
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
        "404":
          description: Battle not found
          content:
            application/json:
              example:
                code: NOT_FOUND
                message: Object not found
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/battle/{id}/rounds:
    get:
      tags:
      - battle-controller
      summary: List all rounds
      operationId: round_1
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageRound'
        "404":
          description: Battle not found
          content:
            application/json:
              example:
                code: NOT_FOUND
                message: Object not found
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
  /api/battle/{id}/round/{round_id}:
    get:
      tags:
      - battle-controller
      summary: Find round by id
      operationId: round_2
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: round_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Battle or round not found
          content:
            application/json:
              example:
                code: NOT_FOUND
                message: Object not found
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Round'
        "401":
          description: User not logged
          content:
            application/json:
              example:
                code: UNAUTHORIZED
                message: User invalid
components:
  schemas:
    Battle:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          maxLength: 80
          minLength: 0
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          enum:
          - CREATED
          - STARTED
          - FINISHED
    Movie:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          maxLength: 255
          minLength: 0
          type: string
        genre:
          maxLength: 80
          minLength: 0
          type: string
    Round:
      required:
      - battle
      - first
      - second
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        first:
          $ref: '#/components/schemas/Movie'
        second:
          $ref: '#/components/schemas/Movie'
        battle:
          $ref: '#/components/schemas/Battle'
        status:
          type: string
          enum:
          - OPEN
          - HIT
          - MISS
    Answer:
      required:
      - choice
      type: object
      properties:
        choice:
          $ref: '#/components/schemas/Movie'
        status:
          type: string
          enum:
          - OPEN
          - HIT
          - MISS
        nextRound:
          $ref: '#/components/schemas/Round'
    LoginDto:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    LoginDtoOutput:
      type: object
      properties:
        username:
          type: string
        token:
          type: string
    Player:
      required:
      - name
      - username
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          maxLength: 255
          minLength: 0
          type: string
        username:
          maxLength: 255
          minLength: 0
          type: string
    Ranking:
      required:
      - score
      type: object
      properties:
        id:
          type: integer
          format: int64
        player:
          $ref: '#/components/schemas/Player'
        score:
          minimum: 0
          type: number
          format: float
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PagePlayer:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/Sort'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    Sort:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PageBattle:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Battle'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageRound:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Round'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
